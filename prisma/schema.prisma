generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ImageList {
  id        Int    @id @default(autoincrement())
  name      String @map("name")
  imageUrl  String @map("image_url") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("image_list")  // 실제 DB 테이블명
}

model activation_token {
  created_at DateTime @db.DateTime(6)
  expired_at DateTime @db.DateTime(6)
  id         BigInt   @id @default(autoincrement())
  member_id  BigInt   @unique(map: "UKhox7bn16m71ln70roxfeqp270")
  token      String   @unique(map: "UKhqvnsd04g5ca3tybwwtcjjc7s") @db.VarChar(255)
  member     member   @relation(fields: [member_id], references: [member_id], onUpdate: Restrict, map: "FKty78t1m27sgln7mxdt3c5gtw")
}

model ai_api_usage {
  call_count Int?
  usage_date DateTime? @db.Date
  created_at DateTime? @db.DateTime(6)
  id         BigInt    @id @default(autoincrement())
  member_id  BigInt?
  updated_at DateTime? @db.DateTime(6)
  member     member?   @relation(fields: [member_id], references: [member_id], onDelete: Restrict, onUpdate: Restrict, map: "FKpum9hv8a1lpbao309l4gyb58s")

  @@index([member_id], map: "FKpum9hv8a1lpbao309l4gyb58s")
}

model authority {
  authority_name String @id @db.VarChar(50)
}

model category {
  category_id   BigInt       @id @default(autoincrement())
  category_name String       @unique(map: "UKlroeo5fvfdeg4hpicn4lw7x9b") @db.VarChar(100)
  ingredient    ingredient[]
}

model ingredient {
  expiration_date   DateTime     @db.Date
  quantity          Int
  category_id       BigInt
  ingredient_id     BigInt       @id @default(autoincrement())
  member_id         BigInt
  refrigerator_id   BigInt
  registration_date DateTime?    @db.DateTime(6)
  ingredient_name   String       @db.VarChar(100)
  photo_url         String?      @db.VarChar(255)
  category          category     @relation(fields: [category_id], references: [category_id], onUpdate: Restrict, map: "FKd3jvt6c0xji9cvxvckf9aapsa")
  member            member       @relation(fields: [member_id], references: [member_id], onUpdate: Restrict, map: "FKlicjlje3ruecgcs3u364qhvke")
  refrigerator      refrigerator @relation(fields: [refrigerator_id], references: [refrigerator_id], onUpdate: Restrict, map: "FKtq5h5o7esxudop0adorphc0vd")

  @@index([category_id], map: "FKd3jvt6c0xji9cvxvckf9aapsa")
  @@index([member_id], map: "FKlicjlje3ruecgcs3u364qhvke")
  @@index([refrigerator_id], map: "FKtq5h5o7esxudop0adorphc0vd")
}

model member {
  activated        Boolean           @db.Bit(1)
  created_at       DateTime?         @db.DateTime(6)
  member_id        BigInt            @id @default(autoincrement())
  updated_at       DateTime?         @db.DateTime(6)
  email            String            @unique(map: "UKmbmcqelty0fbrvxp1q58dn57t") @db.VarChar(50)
  nickname         String?           @db.VarChar(50)
  password         String?           @db.VarChar(100)
  fcm_token        String?           @db.VarChar(255)
  role             String?           @db.VarChar(255)
  join_type        member_join_type?
  activation_token activation_token?
  ai_api_usage     ai_api_usage[]
  ingredient       ingredient[]
  refresh_token    refresh_token[]
  refrigerator     refrigerator[]
}

model refresh_token {
  auto_login  Boolean?  @db.Bit(1)
  created_at  DateTime? @db.DateTime(6)
  expires_at  DateTime? @db.DateTime(6)
  id          BigInt    @id @default(autoincrement())
  issued_at   DateTime? @db.DateTime(6)
  member_id   BigInt?
  updated_at  DateTime? @db.DateTime(6)
  device_info String?   @db.VarChar(255)
  value       String?   @db.VarChar(255)
  member      member?   @relation(fields: [member_id], references: [member_id], onDelete: Restrict, onUpdate: Restrict, map: "FK5gdbafb2i76hk1ai18ah6an4w")

  @@index([member_id], map: "FK5gdbafb2i76hk1ai18ah6an4w")
}

model refrigerator {
  created_at        DateTime?    @db.DateTime(6)
  member_id         BigInt
  refrigerator_id   BigInt       @id @default(autoincrement())
  refrigerator_name String       @db.VarChar(100)
  description       String?      @db.VarChar(255)
  photo_url         String?      @db.VarChar(255)
  ingredient        ingredient[]
  member            member       @relation(fields: [member_id], references: [member_id], onUpdate: Restrict, map: "FK9t3nn3eefpmjwd4fqomd4hfvl")

  @@index([member_id], map: "FK9t3nn3eefpmjwd4fqomd4hfvl")
}

enum member_join_type {
  GOOGLE
  KAKAO
  LOCAL
  NAVER
}
